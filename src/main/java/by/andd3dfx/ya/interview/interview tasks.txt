
1. Дан итератор CustomIterator<Object>, который может возвращать String или CustomIterator. Возможная вложенность внутренних итераторов неограниченна
Написать для него методы next() и hasNext()

2. Дан класс с методами
int current(); и
boolean compareAndSwap(int oldaValue, int newValue);
Написать для него метод int getAndIncrement(), обладающий atomic функциональностью

3. Предположить, что класса Enum в жава нету, реализовать свой класс WeekDaysEnum, реализующий поведение enum с днями недели и всеми нужными методами:
values(), valueOf(), ordinal(), name()
Постараться сделать класс расширяемым, чтобы можно легко можно было добавить новые значения

4. Реализовать алгоритм обхода бинарного дерева из нод:
class Node {
	int value;
	Node left, right;
}
Исходно - дана корневая нода

5. Дан класс
class Foot implements Runnable {
	private String name;

	public class Foot(String name) {
		this.name = name;
	}

	public void run() {
		for(;;) {
			step();
		}
	}

	private void step() {
		System.out.println(name + " steps!");
	}
}
И программа:
public class MainClass {
    public void main(String[] args) {
        new Thread(new Foot("left")).start();
        new Thread(new Foot("right")).start();

        while(true);
    }
}
Исправить программу, чтобы робот шагал ногами по очереди. Исправить еще раз, чтобы не потреблялись ресурсы CPU, пока ожидаем передвижения очередной ноги.

6. Реализовать методы next(), hasNext(), remove() у составного итератора, содержащего 2 обычных итератора внутри себя
class CompositeIterator<Integer> {
	Iterator<Integer> a;
	Iterator<Integer> b;
}
